<<<<<<< .mine
// minesweeper.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "test.h"
#include "MineField.h"
#include "types.h"
#include "PlayerHuman.h"
#include "PlayerRobot.h"
#include "Timer.h"
#include <iostream>

#define START(mines) MineField field(size.size(), size, &timer); field.startgame(mines);
#define DIM(i) size.push_back(i)
#define RULES2D(x,y,mines) DIM(y); DIM(x); START(mines);
#define RULES3D(x,y,z,mines) DIM(z); DIM(x); DIM(y); START(mines);
#define RULES4D(x,y,z,w,mines) DIM(y); DIM(x); DIM(z); DIM(w); START(mines);
#define RULESWMEASY RULES2D(9,9,10) // 81
#define RULESWMNORMAL RULES2D(16,16,40) // 256
#define RULESWMHARD RULES2D(16,30,99) // 480
#define RULES2DEASY RULES2D(20,20,40) // 400
#define RULES2DNORMAL RULES2D(40,30,200) // 1200
#define RULES2DHARD RULES2D(60,40,600) // 2400
#define RULES3DEASY RULES3D(20,8,4,30) // 640
#define RULES3DNORMAL RULES3D(30,9,5,120) // 1350
#define RULES3DHARD RULES3D(40,10,6,400) // 2400
#define RULES4DEASY RULES4D(8,5,4,4,10) // 640

int _tmain(int argc, _TCHAR* argv[])
{
	Timer timer;
#ifdef TESTING
	std::cout << "Running tests" << std::endl;
	timer.starttime("Unit tests");
	if (!test()) {
		return 42;
	}
	timer.endtime("Unit tests");
#endif
	std::cout << "Establishing gamefield" << std::endl;
	timer.starttime("Establishing gamefield");
	SizeVector size;
	RULESWMHARD;
	timer.endtime("Establishing gamefield");
	std::cout << "Playing game" << std::endl;
	timer.starttime("Create player");
	PlayerRobot player(&field, &timer);
	timer.endtime("Create player");
	timer.starttime("Play");
	player.play();
	timer.endtime("Play");
	timer.output();
	std::cin.ignore(0xFFFF, '\n');
	return 0;
}

=======
#include "test.h"
#include "MineField.h"
#include "types.h"
#include "PlayerHuman.h"
#include "PlayerRobot.h"
#include "Timer.h"
#include <iostream>

#define START(mines) MineField field(size.size(), size, &timer); field.startgame(mines);
#define DIM(i) size.push_back(i)
#define RULES2D(x,y,mines) DIM(y); DIM(x); START(mines);
#define RULES3D(x,y,z,mines) DIM(z); DIM(x); DIM(y); START(mines);
#define RULES4D(x,y,z,w,mines) DIM(y); DIM(x); DIM(z); DIM(w); START(mines);
#define RULESWMEASY RULES2D(9,9,10) // 81
#define RULESWMNORMAL RULES2D(16,16,40) // 256
#define RULESWMHARD RULES2D(16,30,99) // 480
#define RULES2DEASY RULES2D(20,20,40) // 400
#define RULES2DNORMAL RULES2D(40,30,200) // 1200
#define RULES2DHARD RULES2D(60,40,600) // 2400
#define RULES3DEASY RULES3D(20,8,4,30) // 640
#define RULES3DNORMAL RULES3D(30,9,5,120) // 1350
#define RULES3DHARD RULES3D(40,10,6,400) // 2400
#define RULES4DEASY RULES4D(8,5,4,4,10) // 640

int main(int argc, char* argv[])
{
	Timer timer;
#ifdef TESTING
	std::cout << "Running tests" << std::endl;
	timer.starttime("Unit tests");
	if (!test()) {
		return 42;
	}
	timer.endtime("Unit tests");
#endif
	std::cout << "Establishing gamefield" << std::endl;
	timer.starttime("Establishing gamefield");
	SizeVector size;
	RULESWMHARD;
	timer.endtime("Establishing gamefield");
	std::cout << "Playing game" << std::endl;
	timer.starttime("Create player");
	PlayerRobot player(&field, &timer);
	timer.endtime("Create player");
	timer.starttime("Play");
	player.play();
	timer.endtime("Play");
	timer.output();
	std::cin.ignore(0xFFFF, '\n');
	return 0;
}

>>>>>>> .r2
